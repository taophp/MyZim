Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-06T10:14:20+01:00

====== 6Idées pour un framework et/ou un CMS ? ======
Created lundi 06 mars 2017
@web @développement @cms @framework

===== Module de traduction Front ? =====
@cms
Il faudrait un module permettant d'effectuer la traduction des éléments d'un site à partir de l'affichage de ce site : chaque texte issu d'un mécanisme de traduction serait enrobé du nécessaire pour, sur un clic, passer en saisie de traduction. Une barre supplémentaire permettrait de basculer la langue de destination en cours. Pour que cela fonctionne, il faudrait que la fonction prenant en charge la traduction surcharge le texte traduit avec du HTML et du JS permettant le basculement et le recueil de la saisie. Il faudrait que dans les éléments injectés il y ait suffisement d'informations pour remonter la saisie à la source et faire en sorte que la traduction soit prise en charge par le bon système. Au pire, il pourrait y avoir un système de remplacement qui prenne en charge les éléments non traduisibles.

===== Dossiers de CSS/SASS/LESS =====
@cms
Il faudrait pouvoir concaténer/minifier des fichiers css dans un dossier, dans l'ordre de numérotation, pour pouvoir ajouter des déclarations où on le souhaite sans avoir à modifier les templates. On aurait des noms de fichiers du style ''10-reset.css, 20-base.css'', etc.
Le même principe serait à appliquer à des dossiers SASS ou LESS.

===== Des cascades par milliers =====
@framework
Le principe des cascades tel qu'on le trouve dans Zend pour les fichiers devrait être généralisé au travers d'une classe d'objets itérables : à l'instanciation, on lui associerait une fonction de recherche à utiliser sur ses éléments ; on lui ajouterait des éléments ; on lui demanderait le résultat d'une recherche sur ces éléments à l'aide d'une méthode de recherche en lui passant en paramètre le critère de recherche ; la méthode renverait les premiers résultats trouvés en parcourant les éléments de l'objet dans l'ordre de leur ajout.
Un paramètre optionnel de la méthode de recherche, valeur par défaut 1, pemettrait d'indiquer le nombre d'éléments souhaités. 0 signifierait que l'on souhaite obtenir //tous// les résultats.
Une méthode pour retourner tous les résultats pour tous les éléments pourrait également être utile (pour réaliser de grandes concaténations, par exemple, comme proposé pour les dossiers de CSS). Par défaut, ce sera le résultat d'une recherche sans critère

===== Paramétrage des éléments de contenu =====
@cms
Il faut d'abord distinguer conteneurs et contenus des autres éléments. Il faut distinguer également les rôles de designers et de rédacteurs, ainsi que les droits correspondants.
Les designers auraient la possibilité d'associer à chaque type d'éléments des propriétés CSS paramétrables par le rédacteur. Il y aurait une liste des propriétés CSS paramétrables par le rédacteur, vide par défaut, que le rédacteur pourrait alimenter. Il ajoutera une rêgle par un clic, indiquerait un nom pour la rêgle, un sélecteur CSS,  l'attribut paramétrable, puis les valeurs possibles. Le rédacteur ferait un formulaire lui affichant le nom de la rêgle, suivi d'un champ lui permettant de saisir une des valeurs possibles.

===== Génération de ressources sur absence =====
@framework @cms
Pour conserver les avantages d'un site statique, tout en ayant la souplessse d'un site dynamique, au lieu de générer l'intégralité du site à l'avance, ne serait-il pas possible de générer les ressources à la demande ? Ainsi, le serveur web pourrait être paramétré pour rediriger toutes les requêtes qui ne sont pas des fichiers vers un unique script php (comme on le fait souvent avec les frameworks classiques) qui générerait la ressource demandée. Le Back End n'aurait alors qu'à //supprimer// les ressources affectées par les modifications de l'utilisateur, et pas à les générer, ce qui serait beaucoup plus rapide.
Le workflow devient :
1. Changement de paramétrage des ressources par l'administrateur
2. Destruction des ressources affectées par le paramétrage
3. Accès aux ressources par un visiteur
4. Vérification de l'existence de la ressource demandée
	a. si elle existe, renvoi immédiat de la ressource par le serveur web sans passer par PHP
	b. si elle n'existe pas, génération de la ressource par PHP, renvoi des données à l'utilisateur et enregistrement dans le système de fichiers

Imaginons le scénario pour une image, cas particulièrement parlant. Avec un design responsiv, on peut imaginer que les images, au moins certaines, aient leurs dimensions déterminées par JavaScript. Imaginons que la page affiche une image ''http://exemple.com/img.png'' mais de dimensions différentes selon la taille de la fenêtre, dimensions calculées lors de l'affichage (ou du redimensionnement). Mettons que les dimensions de l'image à afficher soient de 160px de large sur 90px de haut. De là, JavaScript en déduit une URL contenant des informations concernant à la fois l'image d'origine et les dimensions à laquelle on souhaite la voir, soit dans notre cas, quelque chose comme ''http://exemple.com/img-160x90.png''. Puis il effectue le chargement de l'image. Le serveur web reçoit la demande. S'il trouve le fichier en question (si l'image a déjà été redimensionnée), il envoie le fichier directement. Sinon, il envoie la requête au script PHP, mettons ''http://exemple.com/index.php''. Il est important de remarquer que, dans tous les cas, le serveur web ne lève pas d'erreur 404. Ce n'est que le script PHP, s'il n'est pas capable de gérer l'URL qui lui est demandée qui le fera selon sa configuration. S'il est en mesure de traiter **et s'il l'utilisateur a le droit d'y accéder**, il envoie les données au fur et à mesure qu'il les produit si possible et ferme la connexion au navigateur avant d'enregistrer la nouvelle ressource pour une réponse plus rapide. Un fichier temporaire devrait être utilisé pour éviter de générer une ressource pourrie si le traitement était interrompu.


@question @précaution
Il y a quelques questions qui restent en suspend et quelques précautions à prendre :
* comment éviter un DOS ? Une telle architecture serait particulièrement sensible à une succession de demandes de traitement de ressources coûteuses avec de faibles variations de paramètres.
* comment éviter de donner accès à une ressource interdite ? Le script PHP étant en principe à la racine du site, mais dans un sous-dossier dans le système de fichiers du serveur, la remontée dans l'arborescence est facile à prévoir et à interdir (avec ''realpath()''), mais la descente dans des sous-répêrtoires ? Le serveur web limite normalement ces accès en fonction de son ou ses fichiers de configurations. Comment s'assurer que le script en court-circuite pas cette configuration, qu'elle soit générale ou locale ? Impossible de s'appuyer depuis PHP sur ces configurations, même en y ayant accès, celles-ci varient d'un type de serveur à un autre. Impossible non plus d'accéder en http à l'aide de PHP, car cela impliquerait de reproduire d'éventuelle authentification de l'utilisateur.  La meilleure solution est de ne pas envoyer les données en même temps qu'elles sont produites, mais de les enregistrer dans le fichier avant de rediriger le navigateur (entête http) vers la **même URL**, mais complété d'un paramètre GET aléatoire permettant d'éviter une redirection à l'identique, risquant d'être interprétée comme une erreur par le navigateur. Pour éviter que ce fonctionnement ne pénalise l'accès à toutes les ressources en terme de performance, une directive de configuration pourra être utilisée pour faire la bascule entre les deux modes de fonctionnement. Eventuellement, cette directive pourra être une fonction anonyme permettant de faire une configuration complexe. Dans le cas d'Apache, la fonction pourrait détecter la présence d'un fichier ''.htaccess'' dans le dossier où se trouve la ressource, ou dans un de ses dossiers parents et, s'il était présent, demander une redirection en fin de traitement plutôt qu'un envoi direct des données, ce qui éviterait une double configuration.
* comment différencier les ressources produites des ressources d'origine ? En effet, il peut se révéler nécessaire dans certains cas, de supprimer l'ensemble des données générées. Comment faire pour exécuter cette opération sans risque pour les données d'origine ? Pour les ressources dont l'URL importe peu (images, css, js...), on pourrait très bien placer ces données dans un dossier spécifique. Mais pour les fichiers HTML, dont on sait l'importance de l'URL pour le référencement ? Doit-on également prévoir une directive de configuration ? Oui, celle-ci indiquerait quels fichiers supprimer en fonction de leur nom et de leur emplacement. Par défaut, tous ? **Astuce : cette fonction pourrait-être utilisée pour effectuer un backup des fichiers avant leur effacement !**

===== Sécurité =====
* pour éviter l'utilisation d'un même utilisateur en deux endroits différents (qu'il s'agisse d'une mauvaise pratique intentionnelle ou d'une intrusion), l'ouverture d'une nouvelle session provoque la fermeture de toutes les sessions encore ouvertes pour le même utilisateur (normalement, maximum une).

===== Interface(s) d'administration =====
L'interface d'admininistration ne devrait pas être conçue comme ce que l'on trouve la plupart du temps aujourd'hui, c'est-à-dire un site web de formulaires déclenchant directement un traitement PHP. Il faut découpler l'interface utilisateur du traitement de façon offrir l'autonomie aux deux. L'administration doit ainsi passer entièrement par un webservice. Une interface utilisateur par défaut pour dialoguer avec ce webservice doit être fournie pour ne pas rompre avec l'usage, mais on peut imaginer qu'il s'agisse en réalité d'une application Cordova par exemple. On aurait ainsi toute la souplesse souhaitable pour écrire des interfaces adaptées à toutes les situations.
A partir de là, il est possible de passer à l'industrialisation : une seule seule interface peut être utilisée pour ce connecter à plusieurs administration, suivre les logs de toutes ces instances en un seul point, distribuer des commandes communes à toutes, comme des mises à jour... 

===== Bases de données en service et par fichiers =====
La configuration devrait permettre de choisir //par table// (ou par groupe de tables) le lieu de stockage des données, soit sur un serveur (MySQL, PostgreSQL) soit dans des fichiers (SQLite). De cette façon, le contenu de certaines tables (SQLite) pourrait être versionné et suivre le même flux de déploiement que le code source. Un emplacement par défaut serait proposé pour chaque table, emplacement qui pourrait être écrasé par configuration.
Naturellement, la question des relations et des jointures entre tables pose question, mais il y a tout lieu de penser que des tables ayant des relations devraient être stockées au même emplacement. Quand aux jointures, il faudrait les gérer de manière algorithmique.
En tout les cas, cela ne pourrait être intéressant que pour des tables faiblement liées.

===== Log par objet =====
Le framework devrait permettre de créer un fichier de log sur chaque objet indépendemment du log général et de la fonction de l'objet.
